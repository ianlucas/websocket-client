{"mappings":"AAAA,SAAS,wCAAkB,GAAG;IAC5B,MAAM,SAAS,GAAG,EAAE,AAAC;IACrB,OAAO;QACL,EAAE,EAAC,IAAY,EAAE,OAAiB,EAAE;YAClC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAClB,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;YAEvB,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC/B;QAED,IAAI,EAAC,IAAY,EAAE,GAAG,IAAI,AAAO,EAAE;YACjC,IAAI,SAAS,CAAC,IAAI,CAAC,EACjB,SAAS,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,OAAiB,GAAK;gBAC7C,OAAO,IAAI,IAAI,CAAC,CAAC;aAClB,CAAC,CAAC;SAEN;KACF,CAAC;CACH;AAED,SAAS,gCAAU,CAAC,GAAW,EAAE,QAAgB,EAAE,MAAc,EAAE;IACjE,MAAM,OAAO,GAAG,wCAAkB,EAAE,AAAC;IACrC,MAAM,EAAE,GAAG,IAAI,SAAS,CAAC,GAAG,GAAG,GAAG,GAAG,QAAQ,GAAG,GAAG,GAAG,MAAM,CAAC,AAAC;IAE9D,SAAS,aAAa,CAAC,KAAmB,EAAE;QAC1C,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC;QACpC,OAAQ,IAAI,CAAC,IAAI;YACf,KAAK,OAAO;gBACV,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;gBAClC,MAAM;YACR;gBACE,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;SAC3D;KACF;IAED,SAAS,WAAW,CAAC,KAAiB,EAAE;QACtC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;KACrC;IAED,EAAE,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;IAC1C,EAAE,CAAC,gBAAgB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;IAE9C,OAAO;QACL,aAAa,EAAC,QAA8B,EAAE;YAC5C,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;SAC/B;QAED,IAAI,EAAC,IAAY,EAAE,KAAU,EAAE;YAC7B,EAAE,CAAC,IAAI,CACL,IAAI,CAAC,SAAS,CAAC;sBACb,IAAI;uBACJ,KAAK;aACN,CAAC,CACH,CAAC;SACH;QAED,KAAK,IAAG;YACN,EAAE,CAAC,KAAK,EAAE,CAAC;SACZ;KACF,CAAC;CACH;AAEM,SAAS,yCAAwB,CAAC,GAAW,EAAE;IACpD,OAAO;QACL,OAAO,EAAC,QAAgB,EAAE,MAAc,EAAE;YACxC,OAAO,gCAAU,CAAC,GAAG,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;SAC1C;KACF,CAAC;CACH","sources":["src/websocketClient.ts"],"sourcesContent":["function createEventEmitter() {\r\n  const callbacks = {};\r\n  return {\r\n    on(type: string, handler: Function) {\r\n      if (!callbacks[type]) {\r\n        callbacks[type] = [];\r\n      }\r\n      callbacks[type].push(handler);\r\n    },\r\n\r\n    emit(type: string, ...args: any[]) {\r\n      if (callbacks[type]) {\r\n        callbacks[type].forEach((handler: Function) => {\r\n          handler(...args);\r\n        });\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nfunction createRoom(url: string, roomType: string, roomId: string) {\r\n  const emitter = createEventEmitter();\r\n  const ws = new WebSocket(url + '/' + roomType + '/' + roomId);\r\n\r\n  function handleMessage(event: MessageEvent) {\r\n    const data = JSON.parse(event.data);\r\n    switch (data.type) {\r\n      case 'state':\r\n        emitter.emit('state', data.value);\r\n        break;\r\n      default:\r\n        throw new Error('Invalid message type sent by server.');\r\n    }\r\n  }\r\n\r\n  function handleClose(event: CloseEvent) {\r\n    emitter.emit('close', event.reason);\r\n  }\r\n\r\n  ws.addEventListener('close', handleClose);\r\n  ws.addEventListener('message', handleMessage);\r\n\r\n  return {\r\n    onStateChange(callback: (state: any) => void) {\r\n      emitter.on('state', callback);\r\n    },\r\n\r\n    send(type: string, value: any) {\r\n      ws.send(\r\n        JSON.stringify({\r\n          type,\r\n          value\r\n        })\r\n      );\r\n    },\r\n\r\n    close() {\r\n      ws.close();\r\n    }\r\n  };\r\n}\r\n\r\nexport function connectToWebSocketServer(url: string) {\r\n  return {\r\n    getRoom(roomType: string, roomId: string) {\r\n      return createRoom(url, roomType, roomId);\r\n    }\r\n  };\r\n}\r\n"],"names":[],"version":3,"file":"websocketClient.module.js.map"}